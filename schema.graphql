type Transfer @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  from: String
  to: String
  currencyAmmount: CurrencyAmount
  currencyFee: CurrencyFee
  signer: String!
  signature: String
  blockNumber: Int! @index
  success: Boolean
  params: String
}


type StakingBond @entity {
  id: ID!
  action: String   
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  sender: String
  stash: String
  currencyAmmount: CurrencyAmount
  currencyFee: CurrencyFee
  params: String
  success: Boolean
}

type StakingUnbond @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  sender: String
  stash: String
  currencyAmmount: CurrencyAmount
  currencyFee: CurrencyFee
  params: String
  success: Boolean
}

# Not have event staking.rebond, have event staking.bond
type StakingRebond @entity {
  id: ID!
  action: String   
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  sender: String
  stash: String
  currencyAmmount: CurrencyAmount
  currencyFee: CurrencyFee
  params: String
  success: Boolean
}

type StakingNominate @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  currencyFee: CurrencyFee
  sender: String
  targets: [String]
  success: Boolean
  params: String
}

type StakingChill @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  currencyFee: CurrencyFee
  sender: String
  stash: String
  success: Boolean
}

type StakingWithdraw @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  currencyAmmount: CurrencyAmount
  currencyFee: CurrencyFee
  sender: String
  stash: String
  success: Boolean
}

type CurrencyAmount {
  amount: BigInt
  symbol: String!
  decimal: Int!
}

type CurrencyFee {
  fee: BigInt
  symbol: String!
  decimal: Int!
}
