type Account @entity {
  address: String!
  publicKey: String
}

type Transfer @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  sender: Account
  signer: String!
  signature: String
  blockNumber: Int! @index
  success: Boolean
  params: String
  from: Account
  to: Account
  amount: Amount
  fee: Amount
}


type StakingBond @entity {
  id: ID!
  action: String   
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  sender: Account
  params: String
  success: Boolean
  fee: Amount
  # event
  amount: Amount
  stash: Account
}

type StakingNominate @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  fee: Amount
  sender: Account
  # call
  targets: [Account]
  success: Boolean
  params: String
}

type StakingUnbond @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  sender: Account
  params: String
  success: Boolean
  fee: Amount
  # call
  amount: Amount
  stash: String
}

# Not have event staking.rebond, have event staking.bond
type StakingRebond @entity {
  id: ID!
  action: String   
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  sender: Account
  stash: String
  amount: Amount
  fee: Amount
  params: String
  success: Boolean
}

type StakingChill @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  fee: Amount
  sender: Account
  success: Boolean
  # event
  stash: String
}

type StakingWithdraw @entity {
  id: ID!
  action: String
  extrinsicHash: String
  extrinsicIndex: Int
  timestamp: DateTime! @index
  blockNumber: Int! @index
  fee: Amount
  sender: Account
  success: Boolean
  # event
  stash: String
  amount: Amount
}

type Amount {
  amount: BigInt
  symbol: String!
  decimal: Int!
}
